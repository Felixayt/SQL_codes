1.0--For each account, determine the average amount of each type of paper they purchased across their orders. Your result should have four columns - one for the account name and one for the average quantity purchased for each of the paper types for each account.

SELECT a.name,SUM(standard_qty)/COUNT(standard_qty) avg_std_qty,SUM(gloss_qty)/COUNT(gloss_qty) avg_gloss_qty, SUM(poster_qty)/COUNT(poster_qty) avg_poster_qty
FROM orders o
JOIN accounts a
ON o.account_id = a.id
GROUP BY name;

2.0--For each account, determine the average amount spent per order on each paper type. Your result should have four columns - one for the account name and one for the average amount spent on each paper type.

SELECT a.name,SUM(standard_amt_usd)/COUNT(standard_qty) avg_std_amt,SUM(gloss_amt_usd)/COUNT(gloss_qty) avg_gloss_amt, SUM(poster_amt_usd)/COUNT(poster_qty) avg_poster_amt
FROM orders o
JOIN accounts a
ON o.account_id = a.id
GROUP BY name;

3.0--Determine the number of times a particular channel was used in the web_events table for each sales rep. Your final table should have three columns - the name of the sales rep, the channel, and the number of occurrences. Order your table with the highest number of occurrences first.

SELECT s.name, w.channel, COUNT(w.account_id)
FROM sales_reps s
JOIN accounts a
ON s.id = a.sales_rep_id
JOIN  web_events w
ON a.id = w.account_id
GROUP BY 1,2
ORDER BY 3 DESC;

4.0--Determine the number of times a particular channel was used in the web_events table for each region. Your final table should have three columns - the region name, the channel, and the number of occurrences. Order your table with the highest number of occurrences first.

SELECT r.name, w.channel, COUNT(w.account_id)
FROM region r
JOIN sales_reps s
ON r.id = s.region_id
JOIN accounts a
ON s.id = a.sales_rep_id
JOIN  web_events w
ON a.id = w.account_id
GROUP BY 1,2
ORDER BY 3 DESC;

5.0--Find the sales in terms of total dollars for all orders in each year, ordered from greatest to least. Do you notice any trends in the yearly sales totals?

SELECT SUM(total_amt_usd),DATE_PART('Year',occurred_at) Transaction_Year
FROM orders
GROUP BY 2
ORDER BY 1 DESC;

6.0--Which month did Parch & Posey have the greatest sales in terms of total dollars? Are all months evenly represented by the dataset?

SELECT SUM(total_amt_usd),DATE_PART('Month',occurred_at) Monthly_Transaction
FROM orders
GROUP BY 2
ORDER BY 1 DESC;


7.0--Which year did Parch & Posey have the greatest sales in terms of the total number of orders? Are all years evenly represented by the dataset?

SELECT COUNT(id),DATE_PART('Year',occurred_at) Yearly_Transaction
FROM orders
GROUP BY 2
ORDER BY 1 DESC;

8.0--Which month did Parch & Posey have the greatest sales in terms of the total number of orders? Are all months evenly represented by the dataset?

SELECT COUNT(id),DATE_PART('month',occurred_at) Monthly_Transaction
FROM orders
GROUP BY 2
ORDER BY 1 DESC;

9.0--In which month of which year did Walmart spend the most on gloss paper in terms of dollars?

/*SELECT MAX(o.gloss_amt_usd),DATE_PART('Month',o.occurred_at) monthly, DATE_PART('Year',o.occurred_at) yearly_gloss
from accounts a
Join Orders o
ON a.id = o.account_id
WHERE a.name = 'Walmart'
GROUP BY 2,3
ORDER BY 1 DESC;*/

10.0--Using sum instead of Max

SELECT SUM(o.gloss_amt_usd),DATE_PART('Month',o.occurred_at) monthly, DATE_PART('Year',o.occurred_at) yearly_gloss,a.name
from accounts a
Join Orders o
ON a.id = o.account_id
WHERE a.name = 'Walmart'
GROUP BY 2,3,4
ORDER BY 1 DESC
LIMIT 1;

11.0--Write a query to display the number of orders in each of three categories, based on the total number of items in each order. The three categories are: 'At Least 2000', 'Between 1000 and 2000' and 'Less than 1000'.

SELECT CASE WHEN total >= 2000 THEN 'At Least 2000'
WHEN total >= 1000 AND total < 2000 THEN 'Between 1000 and 2000'
ELSE 'Less than 1000' END AS order_category,
COUNT(*) AS order_count
FROM orders
GROUP BY 1;

12.0--We would like to understand 3 different branches of customers based on the amount associated with their purchases. The top branch includes anyone with a Lifetime Value (total sales of all orders) greater than 200,000 usd. The second branch is between 200,000 and 100,000 usd. The lowest branch is anyone under 100,000 usd. Provide a table that includes the level associated with each account. You should provide the account name, the total sales of all orders for the customer, and the level. Order with the top spending customers listed first.

SELECT a.name, SUM(total_amt_usd) total_spent,
  CASE WHEN SUM(total_amt_usd) > 200000 THEN 'top'
  WHEN  SUM(total_amt_usd) > 100000 THEN 'middle'
  ELSE 'low' END AS customer_level
FROM orders o
JOIN accounts a
ON o.account_id = a.id 
GROUP BY a.name
ORDER BY 2 DESC;

13.0--We would now like to perform a similar calculation to the first, but we want to obtain the total amount spent by customers only in 2016 and 2017. Keep the same levels as in the previous question. Order with the top spending customers listed first.


SELECT a.name, SUM(total_amt_usd) total_spent, 
  CASE WHEN SUM(total_amt_usd) > 200000 THEN 'top'
  WHEN  SUM(total_amt_usd) > 100000 THEN 'middle'
  ELSE 'low' END AS customer_level
FROM orders o
JOIN accounts a
ON o.account_id = a.id
WHERE occurred_at > '2015-12-31' 
GROUP BY 1
ORDER BY 2 DESC;

   --SUBQUERIES SAMPLE CODES
14.0--What was the month/year combo for the first order placed?

SELECT MIN( DATE_TRUNC('month',occurred_at))
                       from orders;
                       
15.0 --The average amount of standard paper sold on the first month that any order was placed in the orders table (in terms of quantity).
     --The average amount of gloss paper sold on the first month that any order was placed in the orders table (in terms of quantity).
     --The average amount of poster paper sold on the first month that any order was placed in the orders table (in terms of quantity).
                  
SELECT AVG(standard_qty) avg_std, AVG(gloss_qty) avg_gls, AVG(poster_qty) avg_pst
FROM orders
WHERE DATE_TRUNC('month', occurred_at) = 
     (SELECT DATE_TRUNC('month', MIN(occurred_at)) FROM orders);
   
16.0--The total amount spent on all orders on the first month that any order was placed in the orders table (in terms of usd).
                        
   SELECT SUM(total_amt_usd)
FROM orders
WHERE DATE_TRUNC('month', occurred_at) = 
      (SELECT DATE_TRUNC('month', MIN(occurred_at)) FROM orders);      
17.0

WITH dept_average AS 
  (SELECT dept, AVG(salary) AS avg_dept_salary
   FROM employee
   GROUP BY employee.dept
  )
SELECT E.eid, E.ename, D.avg_dept_salary
FROM employee E
JOIN dept.average D
ON E.dept = D.dept
WHERE E.salary > D.avg_dept_salary  

18.0-- 
SELECT employee_id,
       name
FROM employees_db emp
WHERE salary > 
      (SELECT AVG(salary)
       FROM employees_db
       WHERE department = emp.department); 

19.0 

SELECT first_name, last_name, GPA, university
 FROM student_db outer_db
 WHERE GPA >
                (SELECT AVG(GPA)
                 FROM student_db
                 WHERE university = outer_db.university);       
      
20.0-- What is the top channel used by each account to market products?
How often was that same channel used?

However, we will need to do two aggregations and two subqueries to make this happen.

Let's find the number of times each channel is used by each account.

So we will need to count the number of rows by Account and Channel. This count will be our first aggregation needed.*/

--STEP 1

SELECT accounts.name, web_events.channel, Count(*)
FROM accounts
JOIN web_events ON accounts.id = Web_events.account_id
GROUP BY 1, 2
ORDER BY 1,3;

--STEP 2

SELECT T1.name, Max(T1.count)
FROM (
       SELECT accounts.name as name, web_events.channel as channel, Count(*) as count
       FROM accounts
       JOIN web_events ON accounts.id = Web_events.account_id
       GROUP BY 1, 2
       ORDER BY 1,3
) as T1
GROUP BY 1

--STEP 3

SELECT T1.name,Web_events, MAX(T1.count)
FROM (SELECT accounts.name, web_events.channel, Count(*)
FROM accounts
JOIN web_events ON accounts.id = Web_events.account_id
GROUP BY 1, 2
ORDER BY 1,3) T1
WHERE 
GROUP BY 1;

--STEP 4

SELECT t3.id, t3.name, t3.channel, t3.ct
FROM (SELECT a.id, a.name, we.channel, COUNT(*) ct
     FROM accounts a
     JOIN web_events we
     On a.id = we.account_id
     GROUP BY a.id, a.name, we.channel) T3
JOIN (SELECT t1.id, t1.name, MAX(ct) max_chan
      FROM (SELECT a.id, a.name, we.channel, COUNT(*) ct
            FROM accounts a
            JOIN web_events we
            ON a.id = we.account_id
            GROUP BY a.id, a.name, we.channel) t1
      GROUP BY t1.id, t1.name) t2
ON t2.id = t3.id AND t2.max_chan = t3.ct
ORDER BY t3.id;            
